#–≠–∫–æ–Ω–æ–º–∏–∫–∞
# -*- coding: utf-8 -*-

from telebot import types
import telebot
import json
import os
from tkinter import Tk, Label

bot = telebot.TeleBot("TOKEN")

def get_balance(user_id):
    if user_id in balances:
        income = balances[user_id].get('income', 0)
        expenses = balances[user_id].get('expenses', 0)
        return income - expenses
    else:
        return 0

def update_balances():
    with open("balances.json", "w") as file:
        json.dump(balances, file)

@bot.message_handler(commands=['plus'])
def add_income(message):
    try:
        bot.send_message(message.chat.id, "üí≤ *–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:*", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_income_step)
        income_tk(message)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå *Error:* {e}", parse_mode="Markdown")

def process_income_step(message):
    user_id = message.from_user.id
    if user_id not in balances:
        balances[user_id] = {"income": 0, "expenses": 0}
    try:
        income = float(message.text)
        balances[user_id]["income"] += income
        update_balances()
        bot.send_message(message.chat.id,
                         f"‚úÖ *–î–æ—Ö–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {income} –¥–æ–±–∞–≤–ª–µ–Ω.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {get_balance(user_id)}", parse_mode="Markdown")
    except ValueError:
        bot.send_message(message.chat.id, f"‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.*", parse_mode="Markdown")

@bot.message_handler(commands=['minus'])
def add_expenses(message):
    try:
        bot.send_message(message.chat.id, "üí∏ *–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:*", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_expenses_step)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå *Error: {e}*", parse_mode="Markdown")

def process_expenses_step(message):
    user_id = message.from_user.id
    if user_id not in balances:
        balances[user_id] = {"income": 0, "expenses": 0}
    try:
        expenses = float(message.text)
        balances[user_id]["expenses"] += expenses
        update_balances()
        bot.send_message(message.chat.id,
                         f"‚úÖ *–†–∞—Å—Ö–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {expenses} –¥–æ–±–∞–≤–ª–µ–Ω.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {get_balance(user_id)}", parse_mode="Markdown")
    except ValueError:
        bot.send_message(message.chat.id, f"‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.*", parse_mode="Markdown")

@bot.message_handler(commands=['balance'])
def get_balance_command(message):
    user_id = message.from_user.id
    if user_id in balances:
        income = balances[user_id].get('income', 0)
        expenses = balances[user_id].get('expenses', 0)
        balance = income - expenses
        bot.send_message(message.chat.id, f"<b>üí∞ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü:</b> {income} —Ä—É–±.\nüí∏ <b>–†–∞—Å—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü:</b> {expenses} —Ä—É–±.\nüîµ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} —Ä—É–±.", parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö. –ù–∞–ø–∏—à–∏—Ç–µ /plus –∏–ª–∏ /minus*", parse_mode="Markdown")

if os.path.exists("balances.json"):
    with open("balances.json", "r") as file:
        balances = json.load(file)
        user_id = None
        if user_id not in balances:
            balances[user_id] = {"income": 0, "expenses": 0}
else:
    balances = {}

if os.path.exists('persons.json'):
    with open('persons.json', 'r') as file:
        persons = json.load(file)
        admins = persons['admins']
        bans = persons['bans']
else:
    print("–§–∞–π–ª persons.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")


@bot.message_handler(commands=['code'])
def send_code(message):
    user_id = message.from_user.id
    print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}:", user_id)
    if user_id in admins:
        with open('economic.py', 'r', encoding='utf-8') as file:
            bot.send_message(message.chat.id, "*–ö–æ–¥ –±–æ—Ç–∞:*", parse_mode="Markdown")
            bot.send_document(message.chat.id, file)

    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω. –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")



@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "*üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –±–∞–ª–∞–Ω—Å—É –≤–∞—à–∏—Ö –¥–µ–Ω–µ–≥ –∏ —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –î–º–∏—Ç—Ä–∏—è –ë–æ—Ä–∏—Å–æ–≤–∏—á–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?*",
                     parse_mode="Markdown")
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:",
                     reply_markup=get_keyboard())


@bot.message_handler(commands=['info'])
def handle_info(message):
    bot.send_message(message.chat.id,
                     f'*–°–æ–∑–¥–∞—Ç–µ–ª—å:* @misakamozin\n*–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:* 27 –º–∞—Ä—Ç–∞ 2024\n*–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: * –ü—Ä–æ–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è "–¶–î–ù–ò–¢–¢ –ø—Ä–∏ –ö—É–∑–ì–¢–£ ¬´–£–Ω–∏–∫–£–º¬ª". –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—Ä–∞—Ç–∞–º–∏ –∏ –±–∞–ª–∞–Ω—Å–æ–º.\n*–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: * telebot, re, json, os',
                     parse_mode="Markdown")


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_input = message.text
    if message.from_user.id in bans:
        bot.send_message(message.chat.id, f"‚ö° –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, {message.from_user.first_name}.")
    elif user_input == "üíª –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º?":
        bot.send_message(message.chat.id,
                         f"‚öú <b>{message.from_user.first_name}, –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n/minus</b> - –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã –≤–≤–æ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–∞—Å—Ö–æ–¥\n<b>/plus</b> - –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –≤–≤–æ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫\n<b>/balance</b> - –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å", parse_mode="HTML")
    elif user_input == "‚ùì –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞":
        markup = telebot.types.InlineKeyboardMarkup()
        button1 = telebot.types.InlineKeyboardButton("–ö–∞–Ω–∞–ª –ø–æ –ø—Ä–æ–µ–∫—Ç—É", url='https://t.me/project_unicum')
        markup.add(button1)
        bot.send_message(message.chat.id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")


def get_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2)
    button1 = types.KeyboardButton("üíª –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º?")
    button2 = types.KeyboardButton("‚ùì –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    markup.add(button1, button2)
    return markup

if __name__ == "__main__":
    bot.polling(none_stop=True)
